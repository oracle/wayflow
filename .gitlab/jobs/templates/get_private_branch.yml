.get_private_branch:
  script:
    - |
      #!/bin/bash

      # Encode inputs
      ENCODED_BRANCH_NAME=$(echo -n "${CI_COMMIT_REF_NAME}" | sed 's|/|%2F|g')
      FULL_PROJECT_NAME="${PRIVATE_PROJECT}/${PRIVATE_REPOSITORY}"
      PROJECT_ENCODED=$(echo -n "$FULL_PROJECT_NAME" | sed 's|/|%2F|g')
      API_URL="$GITLAB_URL/projects/${PROJECT_ENCODED}"

      echo "Checking merge requests for branch: '${CI_COMMIT_REF_NAME}' in $FULL_PROJECT_NAME"

      HTTP_RESPONSE=$(mktemp)

      # API call
      HTTP_STATUS=$(curl -s -o "$HTTP_RESPONSE" -w "%{http_code}" \
        --header "PRIVATE-TOKEN: $GITLAB_BOT_TOKEN" \
        "${API_URL}/merge_requests?state=opened&source_branch=$ENCODED_BRANCH_NAME")

      if [ "$HTTP_STATUS" -ne 200 ] && [ "$HTTP_STATUS" -ne 404 ]; then
        echo "Error: Invalid HTTP status $HTTP_STATUS. Exiting."
        cat "$HTTP_RESPONSE"
        rm "$HTTP_RESPONSE"
        exit 1
      fi

      RESPONSE=$(cat "$HTTP_RESPONSE")
      rm "$HTTP_RESPONSE"

      # Count number of merge requests found (by counting "iid" fields)
      MR_COUNT=$(echo "$RESPONSE" | (grep -o '"iid":' || true) | wc -l)
      if [ "$MR_COUNT" -gt 1 ]; then
        echo "Error: More than one merge request ($MR_COUNT) is open for branch '${CI_COMMIT_REF_NAME}' in $FULL_PROJECT_NAME."
        exit 1
      elif [ "$MR_COUNT" -eq 0 ]; then
        echo "No merge requests found for branch '${CI_COMMIT_REF_NAME}' in $FULL_PROJECT_NAME. Falling back to 'main'."
        export PRIVATE_BRANCH="main"
        export PRIVATE_MERGE_REQUEST_ID=""
        export PRIVATE_MERGE_REQUEST_COMMIT_HASH=""
      else
        echo "One merge request found for branch '${CI_COMMIT_REF_NAME}' in $FULL_PROJECT_NAME."
        MR_ID=$(echo "$RESPONSE" | grep -o '"iid":[0-9]*' | head -n1 | cut -d ':' -f2)
        MR_COMMIT_HASH=$(echo "$RESPONSE" | grep -o '"sha":"[0-9a-f]\+"' | head -n1 | cut -d '"' -f4)
        export PRIVATE_BRANCH="${CI_COMMIT_REF_NAME}"
        export PRIVATE_MERGE_REQUEST_ID="$MR_ID"
        export PRIVATE_MERGE_REQUEST_COMMIT_HASH="$MR_COMMIT_HASH"
      fi